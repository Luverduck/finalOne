<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace = "ahzitBoard">

	<!-- 소모임 번호와 아이디로 특정 소모임 내 회원 정보 조회 -->
	<select id = "selectMemberInfo" parameterType = "map" resultType = "AhzitMemberDto">
		select * from ahzit_member left outer join member_attachment on member_no = member_origin_no where member_ahzit_no = #{memberAhzitNo} and member_id = #{memberId}
	</select>
	
	<!-- 등록을 위한 다음 게시글 번호 반환 -->
	<select id = "nextBoardNo" resultType = "int">
		select ahzit_board_seq.nextval from dual
	</select>
	
	<!-- 소모임 게시글 등록-->
	<insert id = "insertBoard" parameterType = "AhzitBoardDto">
		insert into ahzit_board(board_no, board_writer_no, board_ahzit_no, board_content) values(${boardNo}, #{boardWriterNo}, #{boardAhzitNo}, #{boardContent})
	</insert>
	
	<!-- 소모임 게시글 등록 후 반환을 위한 조회 처리 -->
	<select id = "selectInsertBoard" parameterType = "map" resultType = "AhzitBoardVO">
		select ma.member_attachment_no, already.* from member_attachment ma right outer join (
		    select distinct abambaarablRE.board_no, abambaarablRE.board_writer_no, abambaarablRE.board_content, abambaarablRE.board_like, abambaarablRE.board_writedate, abambaarablRE.member_no, abambaarablRE.member_nick, abambaarablRE.member_grade, abambaarablRE.board_attachment_no, abambaarablRE.reply_count, count(case when abambaarablRE.board_like_member_no = 21 then 1 end) as is_like  
		    from (
		        select distinct abambaarabl.board_no, abambaarabl.board_writer_no, abambaarabl.board_content, abambaarabl.board_like, abambaarabl.board_writedate, abambaarabl.member_no, abambaarabl.member_nick, abambaarabl.member_grade, abambaarabl.board_attachment_no, abambaarabl.board_like_no, abambaarabl.board_like_member_no, count(abambaarabl.reply_no) as reply_count from (
		            select * from (
		                select * from (
		                    select * from (
		                        select * from ahzit_board ab inner join ahzit_member am on ab.board_writer_no = am.member_no 
		                    )abam left outer join board_attachment ba on abam.board_no = ba.board_origin_no
		                )abamba left outer join ahzit_reply ar on abamba.board_no = ar.reply_origin_no
		            ) abambaar left outer join ahzit_board_like abl on abambaar.board_no = abl.board_like_no where abambaar.member_ahzit_no = #{memberAhzitNo} and abambaar.board_state != 'Y' and abambaar.board_no = #{boardNo}
		        ) abambaarabl 
		        group by abambaarabl.board_no, abambaarabl.board_writer_no, abambaarabl.board_content, abambaarabl.board_like, abambaarabl.board_writedate, abambaarabl.member_no, abambaarabl.member_nick, abambaarabl.member_grade, abambaarabl.board_attachment_no, abambaarabl.board_no, abambaarabl.board_writer_no, abambaarabl.board_content, abambaarabl.board_like, abambaarabl.board_writedate, abambaarabl.member_no, abambaarabl.member_nick, abambaarabl.member_grade, abambaarabl.board_attachment_no, abambaarabl.board_like_no, abambaarabl.board_like_member_no
		    ) abambaarablRE group by abambaarablRE.board_no, abambaarablRE.board_writer_no, abambaarablRE.board_content, abambaarablRE.board_like, abambaarablRE.board_writedate, abambaarablRE.member_no, abambaarablRE.member_nick, abambaarablRE.member_grade, abambaarablRE.board_attachment_no, abambaarablRE.reply_count, abambaarablRE.board_like_no
		) already on ma.member_origin_no = already.board_writer_no
	</select>
	
	<!-- 특정 소모임 내 모든 게시글 전체 조회 -->
	<select id = "allList" parameterType = "map" resultType = "AhzitBoardVO">
		select * from (select tmp.*, rownum rn from(
			select ma.member_attachment_no, already.* from member_attachment ma right outer join (
			    select distinct abambaarablRE.board_no, abambaarablRE.board_writer_no, abambaarablRE.board_content, abambaarablRE.board_like, abambaarablRE.board_writedate, abambaarablRE.member_no, abambaarablRE.member_nick, abambaarablRE.member_grade, abambaarablRE.board_attachment_no, abambaarablRE.reply_count, count(case when abambaarablRE.board_like_member_no = #{memberNo} then 1 end) as isLike 
			    from (
			        select distinct abambaarabl.board_no, abambaarabl.board_writer_no, abambaarabl.board_content, abambaarabl.board_like, abambaarabl.board_writedate, abambaarabl.member_no, abambaarabl.member_nick, abambaarabl.member_grade, abambaarabl.board_attachment_no, abambaarabl.board_like_no, abambaarabl.board_like_member_no, count(abambaarabl.reply_no) as reply_count from (
			            select * from (
			                select * from (
			                    select * from (
			                        select * from ahzit_board ab inner join ahzit_member am on ab.board_writer_no = am.member_no where member_ahzit_no = #{memberAhzitNo} and ab.board_state != 'Y'
			                    )abam left outer join board_attachment ba on abam.board_no = ba.board_origin_no
			                )abamba left outer join ahzit_reply ar on abamba.board_no = ar.reply_origin_no
			            ) abambaar left outer join ahzit_board_like abl on abambaar.board_no = abl.board_like_no
			        ) abambaarabl 
			        group by abambaarabl.board_no, abambaarabl.board_writer_no, abambaarabl.board_content, abambaarabl.board_like, abambaarabl.board_writedate, abambaarabl.member_no, abambaarabl.member_nick, abambaarabl.member_grade, abambaarabl.board_attachment_no, abambaarabl.board_no, abambaarabl.board_writer_no, abambaarabl.board_content, abambaarabl.board_like, abambaarabl.board_writedate, abambaarabl.member_no, abambaarabl.member_nick, abambaarabl.member_grade, abambaarabl.board_attachment_no, abambaarabl.board_like_no, abambaarabl.board_like_member_no
			    ) abambaarablRE group by abambaarablRE.board_no, abambaarablRE.board_writer_no, abambaarablRE.board_content, abambaarablRE.board_like, abambaarablRE.board_writedate, abambaarablRE.member_no, abambaarablRE.member_nick, abambaarablRE.member_grade, abambaarablRE.board_attachment_no, abambaarablRE.reply_count, abambaarablRE.board_like_no
			) already on ma.member_origin_no = already.board_writer_no order by already.board_no desc
		)tmp) where rn between #{rownumStart} and #{rownumEnd}
	</select>
	
	<!-- 특정 소모임 내 모든 게시글 검색 조회 -->
	<select id = "searchList" parameterType = "map" resultType = "AhzitBoardVO">
		select * from (select tmp.*, rownum rn from(
		    select ma.member_attachment_no, already.* from member_attachment ma right outer join (
		        select distinct abambaarablRE.board_no, abambaarablRE.board_writer_no, abambaarablRE.board_content, abambaarablRE.board_like, abambaarablRE.board_writedate, abambaarablRE.member_no, abambaarablRE.member_nick, abambaarablRE.member_grade, abambaarablRE.board_attachment_no, abambaarablRE.reply_count, count(case when abambaarablRE.board_like_member_no =  #{memberNo} then 1 end) as isLike 
		        from (
		            select distinct abambaarabl.board_no, abambaarabl.board_writer_no, abambaarabl.board_content, abambaarabl.board_like, abambaarabl.board_writedate, abambaarabl.member_no, abambaarabl.member_nick, abambaarabl.member_grade, abambaarabl.board_attachment_no, abambaarabl.board_like_no, abambaarabl.board_like_member_no, count(abambaarabl.reply_no) as reply_count from (
		                select * from (
		                    select * from (
		                        select * from (
		                            select * from ahzit_board ab inner join ahzit_member am on ab.board_writer_no = am.member_no where member_ahzit_no = #{memberAhzitNo} and ab.board_state != 'Y' and instr(ab.board_content, #{keyword}) > 0
		                        )abam left outer join board_attachment ba on abam.board_no = ba.board_origin_no
		                    )abamba left outer join ahzit_reply ar on abamba.board_no = ar.reply_origin_no
		                ) abambaar left outer join ahzit_board_like abl on abambaar.board_no = abl.board_like_no
		            ) abambaarabl 
		            group by abambaarabl.board_no, abambaarabl.board_writer_no, abambaarabl.board_content, abambaarabl.board_like, abambaarabl.board_writedate, abambaarabl.member_no, abambaarabl.member_nick, abambaarabl.member_grade, abambaarabl.board_attachment_no, abambaarabl.board_no, abambaarabl.board_writer_no, abambaarabl.board_content, abambaarabl.board_like, abambaarabl.board_writedate, abambaarabl.member_no, abambaarabl.member_nick, abambaarabl.member_grade, abambaarabl.board_attachment_no, abambaarabl.board_like_no, abambaarabl.board_like_member_no
		        ) abambaarablRE group by abambaarablRE.board_no, abambaarablRE.board_writer_no, abambaarablRE.board_content, abambaarablRE.board_like, abambaarablRE.board_writedate, abambaarablRE.member_no, abambaarablRE.member_nick, abambaarablRE.member_grade, abambaarablRE.board_attachment_no, abambaarablRE.reply_count, abambaarablRE.board_like_no
		    ) already on ma.member_origin_no = already.board_writer_no order by already.board_no desc
		)tmp) where rn between #{rownumStart} and #{rownumEnd}
	</select>
	
	<!-- 특정 소모임 내 게시글 총 갯수 -->
	<select id = "countAllBoard" parameterType = "int" resultType = "int">
		select count(*) from ahzit_board where board_ahzit_no = #{boardAhzitNo}
	</select>
	
	<!-- 특정 소모임 내 게시글 검색 결과 갯수 -->
	<select id = "countSearchBoard" parameterType = "map" resultType = "int">
		select count(*) from ahzit_board where board_ahzit_no = #{boardAhzitNo} and instr(board_content, #{keyword}) > 0
	</select>
	
	<!-- 소모임 게시글 수정 -->
	<update id = "updateBoard" parameterType = "map">
		update ahzit_board set board_content = #{boardContent} where board_no = #{boardNo} and board_writer_no = #{boardWriterNo}
	</update>
	
	<!-- 소모임 게시글 삭제 -->
	<delete id = "deleteBoard" parameterType = "map">
		delete ahzit_board where board_no = #{boardNo} and board_writer_no = #{boardWriterNo}
	</delete>
	
	<!-- 소모임 게시글 좋아요 갱신 -->
	<update id = "updateBoardLike" parameterType = "map">
		update ahzit_board set board_like = #{boardLike} where board_no = #{boardNo}
	</update>
	
</mapper>